(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    243144,       4877]
NotebookOptionsPosition[    241065,       4803]
NotebookOutlinePosition[    241421,       4819]
CellTagsIndexPosition[    241378,       4816]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Jessica Weed - Take Home Portion
Final Exam\
\>", "Title",
 CellChangeTimes->{{3.640453429092351*^9, 3.640453445050926*^9}}],

Cell[CellGroupData[{

Cell["1. ", "Section",
 CellChangeTimes->{{3.640453453547042*^9, 3.64045346720282*^9}}],

Cell[TextData[{
 "Using the definition of the Laplace Transform, find the Laplace Transform \
of the following function\n\t\n\t\tf(t) = \t2\t0 < t < 3\n\t\t\t",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", "t"], TraditionalForm]]],
 "\tt \[GreaterFullEqual] 3\n\t\t\nDefinition of Laplace Transform:\nLet f be \
a function defined for t \[GreaterFullEqual] 0. Then the integral\n\n\t\
\[ScriptCapitalL] { f(t) } = ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", GridBox[{
      {
       StyleBox["\[Infinity]",
        FontSize->9]},
      {
       StyleBox["0",
        FontSize->9]}
     }]}], TraditionalForm]]],
 " ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", 
    RowBox[{"-", "st"}]], TraditionalForm]]],
 "f (t) dt\nis said to be the Laplace Transform of f, provided that the \
integral converges.\n\n\[ScriptCapitalL] { f(t) } = ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", GridBox[{
      {
       StyleBox["3",
        FontSize->9]},
      {
       StyleBox["0",
        FontSize->9]}
     }]}], TraditionalForm]]],
 " ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", 
    RowBox[{"-", "st"}]], TraditionalForm]]],
 "(2) dt + ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", GridBox[{
      {
       StyleBox["\[Infinity]",
        FontSize->9]},
      {
       StyleBox["3",
        FontSize->9]}
     }]}], TraditionalForm]]],
 " ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", 
    RowBox[{"-", "st"}]], TraditionalForm]]],
 " (",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", "t"], TraditionalForm]]],
 ") dt\n\n\[ScriptCapitalL] { f(t) } = ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", GridBox[{
      {
       StyleBox["3",
        FontSize->9]},
      {
       StyleBox["0",
        FontSize->9]}
     }]}], TraditionalForm]]],
 " ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", 
    RowBox[{"-", "st"}]], TraditionalForm]]],
 "(2) dt + ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", GridBox[{
      {
       StyleBox["\[Infinity]",
        FontSize->9]},
      {
       StyleBox["3",
        FontSize->9]}
     }]}], TraditionalForm]]],
 " ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", 
    RowBox[{"t", "-", "st"}]], TraditionalForm]]],
 " dt\n\n\[ScriptCapitalL] { f(t) } = -",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{" ", 
     RowBox[{"2", " ", 
      SuperscriptBox["e", 
       RowBox[{"-", "st"}]]}]}], "s"], TraditionalForm]],
  FontSize->18],
 StyleBox["|",
  FontSize->24],
 Cell[BoxData[
  FormBox[GridBox[{
     {
      StyleBox["3",
       FontSize->10]},
     {
      StyleBox["0",
       FontSize->10]}
    }], TraditionalForm]]],
 " + ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", GridBox[{
      {
       StyleBox["\[Infinity]",
        FontSize->9]},
      {
       StyleBox["3",
        FontSize->9]}
     }]}], TraditionalForm]]],
 " ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", 
    RowBox[{"t", "-", "st"}]], TraditionalForm]]],
 " dt\n\n\[ScriptCapitalL] { f(t) } = -",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{" ", 
     RowBox[{"2", " ", 
      SuperscriptBox["e", 
       RowBox[{"-", "st"}]]}]}], "s"], TraditionalForm]],
  FontSize->18],
 StyleBox["|",
  FontSize->24],
 Cell[BoxData[
  FormBox[GridBox[{
     {
      StyleBox["3",
       FontSize->10]},
     {
      StyleBox["0",
       FontSize->10]}
    }], TraditionalForm]]],
 " + ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["lim", 
    RowBox[{"b", " ", "\[Rule]", " ", "\[Infinity]"}]], TraditionalForm]]],
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Integral]", GridBox[{
      {
       StyleBox["b",
        FontSize->10]},
      {
       StyleBox["3",
        FontSize->9]}
     }]}], TraditionalForm]]],
 " ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", 
    RowBox[{"-", 
     RowBox[{"t", "(", 
      RowBox[{"s", "-", "1"}], ")"}]}]], TraditionalForm]]],
 " dt\n\n\[ScriptCapitalL] { f(t) } = -",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{" ", 
     RowBox[{"2", " ", 
      SuperscriptBox["e", 
       RowBox[{"-", "st"}]]}]}], "s"], TraditionalForm]],
  FontSize->18],
 StyleBox["|",
  FontSize->24],
 Cell[BoxData[
  FormBox[GridBox[{
     {
      StyleBox["3",
       FontSize->10]},
     {
      StyleBox["0",
       FontSize->10]}
    }], TraditionalForm]]],
 " + ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["lim", 
    RowBox[{"b", " ", "\[Rule]", " ", "\[Infinity]"}]], TraditionalForm]]],
 " -",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{" ", 
     SuperscriptBox["e", 
      RowBox[{
       RowBox[{"-", "t"}], " ", 
       RowBox[{"(", 
        RowBox[{"s", "-", "1"}], ")"}]}]]}], 
    RowBox[{"(", 
     RowBox[{"s", "-", "1"}], ")"}]], TraditionalForm]],
  FontSize->18],
 StyleBox["|",
  FontSize->24],
 Cell[BoxData[
  FormBox[GridBox[{
     {
      StyleBox["b",
       FontSize->10]},
     {
      StyleBox["3",
       FontSize->9]}
    }], TraditionalForm]]],
 "\n\[ScriptCapitalL] { f(t) } = -",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{" ", 
      RowBox[{"2", " ", 
       SuperscriptBox["e", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", "3", ")"}]}], "s"}]]}]}], "s"], "+", 
    FormBox[
     FractionBox[
      RowBox[{" ", 
       RowBox[{"2", 
        SuperscriptBox["e", 
         RowBox[{
          RowBox[{"-", 
           RowBox[{"(", "0", ")"}]}], "s"}]]}]}], "s"],
     TraditionalForm]}], TraditionalForm]],
  FontSize->18],
 "+ ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["lim", 
    RowBox[{"b", " ", "\[Rule]", " ", "\[Infinity]"}]], TraditionalForm]]],
 "[ -",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{" ", 
     SuperscriptBox["e", 
      RowBox[{" ", 
       RowBox[{
        RowBox[{"-", "b"}], " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "1"}], ")"}]}]}]]}], 
    RowBox[{"(", 
     RowBox[{"s", "-", "1"}], ")"}]], TraditionalForm]],
  FontSize->18],
 "+ ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{" ", 
     SuperscriptBox["e", 
      RowBox[{"0", 
       RowBox[{"(", 
        RowBox[{"s", "-", "1"}], ")"}]}]]}], 
    RowBox[{"(", 
     RowBox[{"s", "-", "1"}], ")"}]], TraditionalForm]],
  FontSize->18],
 "]\n\[ScriptCapitalL] { f(t) } = -",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{" ", 
      RowBox[{"2", " ", 
       SuperscriptBox["e", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", "3", ")"}]}], "s"}]]}]}], "s"], "+", 
    FormBox[
     FractionBox[
      RowBox[{" ", 
       RowBox[{"2", 
        RowBox[{"(", "1", ")"}]}]}], "s"],
     TraditionalForm]}], TraditionalForm]],
  FontSize->18],
 "+ ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["lim", 
    RowBox[{"b", " ", "\[Rule]", " ", "\[Infinity]"}]], TraditionalForm]]],
 "[ ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{" ", 
     SuperscriptBox["e", 
      RowBox[{" ", 
       RowBox[{
        RowBox[{"-", "b"}], " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "1"}], ")"}]}]}]]}], 
    RowBox[{"(", 
     RowBox[{"s", "-", "1"}], ")"}]], TraditionalForm]],
  FontSize->18],
 "+ ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{" ", "1"}], 
    RowBox[{"(", 
     RowBox[{"s", "-", "1"}], ")"}]], TraditionalForm]],
  FontSize->18],
 "]\nAs b approaches \[Infinity] the term ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{" ", 
     SuperscriptBox["e", 
      RowBox[{" ", 
       RowBox[{
        RowBox[{"-", "b"}], " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "1"}], ")"}]}]}]]}], 
    RowBox[{"(", 
     RowBox[{"s", "-", "1"}], ")"}]], TraditionalForm]],
  FontSize->18],
 " goes to 0 because ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", 
    RowBox[{
     RowBox[{"-", "\[Infinity]"}], " ", 
     RowBox[{"(", 
      RowBox[{"s", "-", "1"}], ")"}]}]], TraditionalForm]]],
 " approaches 0 (as long as s > 1). The term ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{" ", "1"}], 
    RowBox[{"(", 
     RowBox[{"s", "-", "1"}], ")"}]], TraditionalForm]],
  FontSize->18],
 "is not dependent on b so it will not be affected when b approaches \
\[Infinity], so it is significant in this case.\nTherefore: \n\
\[ScriptCapitalL] { f(t) } =  -",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{" ", 
      RowBox[{"2", " ", 
       SuperscriptBox["e", 
        RowBox[{
         RowBox[{"-", "3"}], "s"}]]}]}], "s"], "+", 
    FormBox[
     FractionBox[
      RowBox[{" ", "2"}], "s"],
     TraditionalForm]}], TraditionalForm]],
  FontSize->18],
 "+ ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    FractionBox["1", 
     RowBox[{"s", "-", "1"}]],
    FontSize->16], TraditionalForm]]],
 ", s > 1"
}], "Text",
 CellChangeTimes->{{3.6404534708427277`*^9, 3.640453503850196*^9}, {
   3.6404535449244947`*^9, 3.640453575345491*^9}, {3.6404536100004587`*^9, 
   3.640453627201118*^9}, {3.6404536740197277`*^9, 3.640453911309328*^9}, {
   3.640454004263246*^9, 3.640454113591385*^9}, {3.640454179082388*^9, 
   3.640454205002125*^9}, {3.640454247922701*^9, 3.640454255849514*^9}, {
   3.6404542874173813`*^9, 3.640454351212267*^9}, {3.640454567630096*^9, 
   3.640454723213868*^9}, 3.640455185902212*^9, {3.640455292425728*^9, 
   3.6404553679169807`*^9}, {3.640455482471149*^9, 3.640455489267104*^9}, {
   3.640455521076179*^9, 3.6404556247324343`*^9}, {3.640455884865652*^9, 
   3.6404558885988617`*^9}, {3.640456108207769*^9, 3.640456158869492*^9}, {
   3.640456199283338*^9, 3.640456200194182*^9}, {3.640456233597369*^9, 
   3.640456259745635*^9}, 3.640456415752824*^9, {3.640456807854932*^9, 
   3.6404568086461697`*^9}, {3.640456863043109*^9, 3.640457035686206*^9}, {
   3.6404570801841784`*^9, 3.640457095086895*^9}, 3.6404592892049017`*^9, {
   3.6404624108562927`*^9, 3.640462417493288*^9}, {3.640607715450745*^9, 
   3.640607717959219*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.", "Section",
 CellChangeTimes->{{3.640449826743578*^9, 3.640449827413288*^9}}],

Cell[TextData[{
 "Consider the following ordinary differential equation: \n\n\t",
 StyleBox["\t",
  FontSize->18],
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["dy", "dx"], "=", " ", 
    FractionBox["x", "y"]}], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->18],
 "\n\t\t\n\ta. Use DSolve[] in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to find the general form of the solution y(x)."
}], "Text",
 CellChangeTimes->{{3.640449831237187*^9, 3.6404498727810163`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"y", "'"}], "[", "x", "]"}], "\[Equal]", 
     FractionBox["x", 
      RowBox[{"y", "[", "x", "]"}]]}], "}"}], ",", 
   RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.640449877645918*^9, 3.640449893676992*^9}, {
  3.640449942897245*^9, 3.640449961150168*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
     RowBox[{"-", 
      SqrtBox[
       RowBox[{
        SuperscriptBox["x", "2"], "+", 
        RowBox[{"2", " ", 
         RowBox[{"C", "[", "1", "]"}]}]}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
     SqrtBox[
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       RowBox[{"2", " ", 
        RowBox[{"C", "[", "1", "]"}]}]}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6404499535618258`*^9, 3.640449964201782*^9}}]
}, Open  ]],

Cell[TextData[{
 "\tb. Explain, using concepts or theorems from class, why you see the output \
that you do. In other words, WHY you see two answers. \nThis o.d.e. has \
multiple solutions.  They both have the same interval of existence but lie \
mirrored over the xy plane in comparison to one another.  At ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "2"}], 
    SubscriptBox["C", "1"]}], TraditionalForm]]],
 "\[GreaterEqual] x the solutions are no longer defined, however the o.d.e. \
is defined. When taking the square root of both sides, you take away half of \
the interval that the ode is defined.  So the - and + functions in this case \
cover the entire interval during which the o.d.e. is defined. "
}], "Text",
 CellChangeTimes->{{3.640449981553337*^9, 3.640450196094692*^9}, 
   3.640450233313159*^9, 3.640462599169222*^9, {3.640463400524391*^9, 
   3.6404634210836277`*^9}, {3.640463487271113*^9, 3.640463493375321*^9}, {
   3.640463615344008*^9, 3.64046362765596*^9}, {3.640463668817546*^9, 
   3.6404636936633873`*^9}, {3.640463842156896*^9, 3.640463846995964*^9}, {
   3.640464315419776*^9, 3.6404644461252937`*^9}, {3.640608162650733*^9, 
   3.640608181999105*^9}}],

Cell["\<\
This would work for any constant, C1, but as an example, I set C1 to 2. \
\>", "Text",
 CellChangeTimes->{{3.640450560530163*^9, 3.6404505758010798`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"C1", " ", "=", " ", "50"}]], "Input",
 CellChangeTimes->{{3.640450527731243*^9, 3.640450543236087*^9}, {
  3.640450595792184*^9, 3.6404506089483957`*^9}, {3.640462670078228*^9, 
  3.640462671680385*^9}, {3.640463871572097*^9, 3.640463872062475*^9}, {
  3.640463975379361*^9, 3.640463983332897*^9}, {3.6404642666510344`*^9, 
  3.6404642912275047`*^9}}],

Cell[BoxData["50"], "Output",
 CellChangeTimes->{{3.6404505330552607`*^9, 3.640450543628891*^9}, {
   3.640450596030345*^9, 3.640450609235807*^9}, 3.640462736618236*^9, 
   3.6404638726807404`*^9, {3.6404639764027843`*^9, 3.640463983578258*^9}, {
   3.640464267824285*^9, 3.640464291515225*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", " ", "=", " ", 
  RowBox[{"-", 
   SqrtBox[
    RowBox[{
     SuperscriptBox["x", "2"], "+", 
     RowBox[{"2", " ", "C1"}]}]]}]}]], "Input",
 CellChangeTimes->{{3.640450424196126*^9, 3.640450424594923*^9}, {
  3.6404504757002974`*^9, 3.640450484337885*^9}, {3.6404626615129128`*^9, 
  3.640462662469558*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  SqrtBox[
   RowBox[{"100", "+", 
    SuperscriptBox["x", "2"]}]]}]], "Output",
 CellChangeTimes->{
  3.640450486759256*^9, {3.6404627340599747`*^9, 3.640462737404373*^9}, 
   3.640463878898827*^9, {3.640463977191367*^9, 3.64046398439117*^9}, {
   3.640464272810891*^9, 3.640464292328644*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"b", " ", "=", " ", 
  SqrtBox[
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    RowBox[{"2", " ", "C1"}]}]]}]], "Input",
 CellChangeTimes->{{3.6404504874694767`*^9, 3.640450494129633*^9}, {
  3.64046266459305*^9, 3.6404626648131533`*^9}}],

Cell[BoxData[
 SqrtBox[
  RowBox[{"100", "+", 
   SuperscriptBox["x", "2"]}]]], "Output",
 CellChangeTimes->{
  3.640450496799921*^9, 3.6404627381616077`*^9, 3.640463880039887*^9, {
   3.640463979012335*^9, 3.640463985074788*^9}, {3.640464273838175*^9, 
   3.640464293050157*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6404505060404177`*^9, 3.640450515472232*^9}, {
  3.640463888928976*^9, 3.640463927924878*^9}, {3.640463972341909*^9, 
  3.6404639995937843`*^9}, {3.640464302764207*^9, 3.64046430459546*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
bVBJqU7/oaP4fv5/93fy/+/v/wMW1YUQ
     "]]}, 
   {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
VCjV6T90FN/P/+/+Dv///v4/LeoGkA==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-10, 10}, {-14.14213533511594, 14.14213533511594}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.640450515779832*^9, 3.640450546534321*^9}, {
   3.640450597784672*^9, 3.640450612925909*^9}, 3.640462738993021*^9, {
   3.6404638744884787`*^9, 3.6404639281928883`*^9}, {3.640463972691291*^9, 
   3.640464000028595*^9}, {3.640464274855538*^9, 3.640464304988719*^9}}]
}, Open  ]],

Cell[TextData[{
 "\n\n\tc. Solve the O.D.E. by hand using separation of variables.\n\t\n\t",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     FractionBox["dy", "dx"], "=", 
     FractionBox["x", "y"]}],
    FontSize->16], TraditionalForm]]],
 "\n\ty dy = x dx\n\t\[Integral] y dy = \[Integral] x dx\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["1", "2"], 
    SuperscriptBox["y", "2"]}], TraditionalForm]]],
 "= ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["1", "2"], 
    SuperscriptBox["x", "2"]}], TraditionalForm]]],
 "+ ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "1"], TraditionalForm]]],
 "\n\t",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["y", "2"], TraditionalForm]]],
 "= ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], " ", "+", " ", 
    RowBox[{"2", " ", 
     SubscriptBox["c", "1"]}]}], TraditionalForm]]],
 "\n\ty = ",
 "\[PlusMinus]",
 "\[Sqrt] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], "+", " ", 
    RowBox[{"2", 
     SubscriptBox["c", "1"]}]}], TraditionalForm]]],
 "\n\t"
}], "Text",
 CellChangeTimes->{{3.640449981553337*^9, 3.640450196094692*^9}, {
   3.640450233313159*^9, 3.6404503056521797`*^9}, {3.6404505831849003`*^9, 
   3.64045058804871*^9}, {3.64045062059772*^9, 3.640450660423725*^9}, {
   3.640462625321301*^9, 3.640462625649026*^9}, 3.640607812299905*^9}],

Cell["", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["3.", "Section",
 CellChangeTimes->{{3.6404510357985992`*^9, 3.640451046486206*^9}}],

Cell[TextData[{
 "Consider the following ordinary differential equation\n\t\t\n\t\t",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "y\[CloseCurlyQuote]\[CloseCurlyQuote] + 4xy\[CloseCurlyQuote] + 2y = g(x)\n\
\t\t\nwhere g(x) is a nonzero, differentiable function. This o.d.e. has the \
following particular solution\n\n\t\t",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "p"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "= (-1 + ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    FractionBox["6", 
     SuperscriptBox["x", "2"]],
    FontSize->18], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->16],
 ") cos(x) + ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"4", "sin", 
     RowBox[{"(", "x", ")"}]}], "x"], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->18],
 "\nFind, by hand, the general solution to the nonhomogeneous o.d.e."
}], "Text",
 CellChangeTimes->{{3.640451051094236*^9, 3.640451281125739*^9}, {
  3.640452013598634*^9, 3.640452106075653*^9}}],

Cell[TextData[{
 StyleBox["Answer:\n", "Subsection"],
 "\nThe homogeneous equation is: \n\n",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "y'' + 4xy' + 2y = 0\n\na = 1\nb = 4\nc = 2\n\nAssume the solution takes the \
form y = ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "m"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "\n\ny = ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "m"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "\t\ty' = ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["mx", 
    RowBox[{"m", "-", "1"}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " \t y''= ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"m", "-", "1"}], ")"}], "m", " ", 
    SuperscriptBox["x", 
     RowBox[{"m", "-", "2"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "\n\n",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "(m-1) ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["mx", 
    RowBox[{"m", "-", "2"}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "+ ",
 Cell[BoxData[
  FormBox[
   RowBox[{"4", 
    SuperscriptBox["xmx", 
     RowBox[{"m", "-", "1"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "+ ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", 
    SuperscriptBox["x", "m"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " = 0\n(m-1) m ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "m"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "+ ",
 Cell[BoxData[
  FormBox[
   RowBox[{"4", 
    SuperscriptBox["mx", "m"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " + ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", 
    SuperscriptBox["x", "m"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "= 0\n",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "m"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "[(m-1)m + 4m + 2] = 0\tWe know ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", 
    RowBox[{"m", " "}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "will not be zero at any time as long as x is not zero, so I can disregard \
it being a root.\n(m-1)m + 4m + 2 = 0\n",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["m", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "- m + 4m + 2 = 0 \n",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["m", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "+ 3m + 2 = 0"
}], "Text",
 CellChangeTimes->{{3.640451051094236*^9, 3.640451281125739*^9}, {
  3.640452013598634*^9, 3.6404523687708607`*^9}, {3.64046445856714*^9, 
  3.640464496060617*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Roots", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["m", "2"], "+", " ", 
     RowBox[{"3", "m"}], " ", "+", " ", "2"}], " ", "\[Equal]", "0"}], ",", 
   " ", "m"}], "]"}]], "Input",
 CellChangeTimes->{{3.6404523741880627`*^9, 3.640452383747023*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"m", "\[Equal]", 
   RowBox[{"-", "2"}]}], "||", 
  RowBox[{"m", "\[Equal]", 
   RowBox[{"-", "1"}]}]}]], "Output",
 CellChangeTimes->{3.64045238441488*^9}]
}, Open  ]],

Cell[TextData[{
 "Therefore, the roots of the auxiliary equation are m = -2 and m = -1.\nFor \
the homogeneous equation, the solution is:\n\n",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "c"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " = ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", 
    RowBox[{"-", "1"}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "+ ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", 
    RowBox[{"-", "2"}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "\n\nHowever, we must include the particular solution.\n\ny = ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "c"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "+ ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "p"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "\ny = ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", 
    RowBox[{"-", "1"}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "+ ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", 
    RowBox[{"-", "2"}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "+ (-1 + ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    FractionBox["6", 
     SuperscriptBox["x", "2"]],
    FontSize->18], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->16],
 ") cos(x) + ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"4", "sin", 
     RowBox[{"(", "x", ")"}]}], "x"], TraditionalForm]],
  FormatType->"TraditionalForm",
  FontSize->18]
}], "Text",
 CellChangeTimes->{{3.640452391055814*^9, 3.640452504462941*^9}, {
  3.640452558009734*^9, 3.6404525719166527`*^9}, {3.64045260420639*^9, 
  3.64045263112096*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.", "Section",
 CellChangeTimes->{{3.6404571621098423`*^9, 3.6404571626200113`*^9}}],

Cell[TextData[{
 "(For my case - because ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " keeps autocorrecting my subscripts- I will be using x for rabbit \
population and y for hunter population)\nLet a population of rabbits and \
hunters be descibed by\n\n",
 Cell[BoxData[
  FormBox[
   RowBox[{"\t", 
    FractionBox["dx", "dt"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "= ",
 Cell[BoxData[
  FormBox[
   RowBox[{"10", "x"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " - ",
 Cell[BoxData[
  FormBox["100", TraditionalForm]],
  FormatType->"TraditionalForm"],
 "xy\n\t",
 Cell[BoxData[
  FormBox[
   FractionBox["dy", "dt"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "= 10xy - 7y\n\t\nWhere x(t) represents the rabbit population and y(t) \
represents the hunter population in the Looney Toons forest in a particular \
year, t after the year 2015. (Note, this means that t=0 is the moment the \
year 2016 begins and t=1 is the very end of 2016 or beginning of 2017). x(t) \
and y(t) are positive. \n\na. Some characters in the Looney Toons forest are \
not happy with the number of rabbits, which at the very end of 2015 will be 5 \
rabbits.  Hence, at t=0, rabbit season will begin.  If Elmer Fudd and his \
wife are the only hunters (at t=0), write an initial value problem for which \
the solution desribes the number of rabbits in the Looney Toons forest at \
time t and the number of hunters in the forest at time t. \n\nSolve ",
 Cell[BoxData[
  FormBox[
   FractionBox["dx", "dt"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "= ",
 Cell[BoxData[
  FormBox[
   RowBox[{"10", "x"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " - ",
 Cell[BoxData[
  FormBox["100", TraditionalForm]],
  FormatType->"TraditionalForm"],
 "xy \n\tsubject to x(0) = 5.\nThis will give us the number of rabbits in the \
forest at time t.\n\nSolve ",
 Cell[BoxData[
  FormBox[
   FractionBox["dy", "dt"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "= 10xy - 7y\n\tsubject to y(0) = 2\nThis will give us the number of hunters \
in the forest at time t.\n\nb. Use NDSolve in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to find numerical solutions for the IVP you found in 4a.  Plot these \
solutions in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". Label your plots well. (Do not create plots for more than a few years in \
the future for this part of the problem.)"
}], "Text",
 CellChangeTimes->{{3.640457174095751*^9, 3.640457338154056*^9}, {
  3.6404574003335247`*^9, 3.6404575002085667`*^9}, {3.640457542415987*^9, 
  3.640457672584508*^9}, {3.640457780795903*^9, 3.640457780969269*^9}, {
  3.640457821042541*^9, 3.640457880704377*^9}, {3.6404579198459587`*^9, 
  3.640457938476022*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"soln", " ", "=", " ", 
  RowBox[{"NDSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"x", "'"}], "[", "t", "]"}], "\[Equal]", 
       RowBox[{
        RowBox[{"10", 
         RowBox[{"x", "[", "t", "]"}]}], "-", 
        RowBox[{"100", 
         RowBox[{"x", "[", "t", "]"}], "*", 
         RowBox[{"y", "[", "t", "]"}]}]}]}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"y", "'"}], "[", "t", "]"}], "\[Equal]", 
       RowBox[{
        RowBox[{"10", 
         RowBox[{"x", "[", "t", "]"}], " ", 
         RowBox[{"y", "[", "t", "]"}]}], "-", 
        RowBox[{"7", 
         RowBox[{"y", "[", "t", "]"}]}]}]}], ",", 
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "\[Equal]", "5"}], ",", 
      RowBox[{
       RowBox[{"y", "[", "0", "]"}], "\[Equal]", "2"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", "t", "]"}], ",", 
      RowBox[{"y", "[", "t", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "5"}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"x", "[", "t", "]"}], "/.", "soln"}], ",", 
     RowBox[{
      RowBox[{"y", "[", "t", "]"}], "/.", "soln"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Red", ",", "Blue"}], "}"}]}], ",", " ", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Rabbit Population\>\"", ",", "\"\<Hunter Population\>\""}], 
     "}"}]}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.640458015499712*^9, 3.6404580825238667`*^9}, {
  3.640458135194089*^9, 3.6404581359277782`*^9}, {3.640458188396388*^9, 
  3.640458304228682*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "[", "t", "]"}], "\[Rule]", 
     RowBox[{
      TagBox[
       TemplateBox[{RowBox[{
           StyleBox[
            TagBox["InterpolatingFunction", "SummaryHead"], 
            "NonInterpretableSummary"], 
           StyleBox["[", "NonInterpretableSummary"], 
           DynamicModuleBox[{Typeset`open$$ = False}, 
            PanelBox[
             PaneSelectorBox[{False -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwBUQOu/CFib1JlAgAAADQAAAACAAAAStFeOa+/dj7sRUvl6v8TQFt+433D
3bQ/FuBMw4UOwT4/lvq2a77FP+g+dmaVlym+UPQI4wkn0D98QTAktl7gPTg0
cm9ZVNU/uonU0aBuyT33vGVz/fHaP3o+j92FaNy9r0FwQdgX4D+44qNB69Le
vU7J8gTc7uI/N1vh4z7E5r1JHOSKnbjlP7rpEJbf5vS9GA6ZlmZS6D+88WIS
HI8EvlIkE95ZJOs/oJFVIc7dFr5g2VCrVMbtPxdn2tfV9Si+5ax+nYYt8D84
P7scp1A7vlB/NwP4k/E/yPVhw7InUL4lIdIrbeLyPwc064wJJWK+MFVPcvdM
9D+zDWkn8uN1vunuA5rgsPU/KZItG08Jir4MWJqEzfz2P7bsmplvPZ2+ZVMT
jc9k+D85CuoH+5exvigebljVtPk/JnzzXmX5w74he6tB8CD7PzjvovItSti+
xz0gDGqG/D/0RPePEBHtvtfPdpnn0/0/w0tVzN5nAL8d9K9Eej3/Pw+UYOh9
1BO/53NlWYhHAECP/lIiW5smv5WgDgED7QBAi4oERAFcOb9eFqk3iKABQPUG
qev1dk6/3HO0Tw9IAkBfHEHWHEJhv3Uasfag/QJA8qz9zgHxdL/lc0kO4q8D
QK1VxCyVAIm/CrVSByVWBEDUZOx+Giecv0o/TY9yCgVANhgzzZT5sL8/sbj4
wbIFQNIp94pYTsO/C9a/0sBXBkBKzlMo0ZrVv/JDuDvKCgdA3kmNg5Xk6b+O
mSGG1bEHQJ7JveBlRP2/RTh8X+tmCEChTyy94bYRwLG+RxoDEAlAKplgJmI5
JMD0965FyrUJQOOcsQkEuDbAUnoHAJxpCkD+nko1FlVLwGXk0JtvEQtACcUA
STMDX8CTl4vGTccLQLu+O4S313LAl/3hYdt5DEDn+wPAgIeGwFBLqd5qIA1A
pAde1bpnmcAk4mHqBNUNQJjkp/Zkrq7ArWCL16B9DkAdyt3yBnnBwA2SUDXs
Ig9A2ckHGO2U08CIDAciQtYPQFDzQjCtgOfAXDcX+Mw+EEASpsytrpr6wAKN
oyZ+mRBAx0wZLUogEMETvH0Nh/IQQA+jW59ePCPBTfQYGN1AEUAQ+cVelvU0
wZQYm+4=
                    "]]}}}, {
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> 
                    None}, PlotRange -> {{0., 5.}, {-1.3735903702083267`*^6, 
                    4.999919493407543}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "5.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False,
                  GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], True -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwBUQOu/CFib1JlAgAAADQAAAACAAAAStFeOa+/dj7sRUvl6v8TQFt+433D
3bQ/FuBMw4UOwT4/lvq2a77FP+g+dmaVlym+UPQI4wkn0D98QTAktl7gPTg0
cm9ZVNU/uonU0aBuyT33vGVz/fHaP3o+j92FaNy9r0FwQdgX4D+44qNB69Le
vU7J8gTc7uI/N1vh4z7E5r1JHOSKnbjlP7rpEJbf5vS9GA6ZlmZS6D+88WIS
HI8EvlIkE95ZJOs/oJFVIc7dFr5g2VCrVMbtPxdn2tfV9Si+5ax+nYYt8D84
P7scp1A7vlB/NwP4k/E/yPVhw7InUL4lIdIrbeLyPwc064wJJWK+MFVPcvdM
9D+zDWkn8uN1vunuA5rgsPU/KZItG08Jir4MWJqEzfz2P7bsmplvPZ2+ZVMT
jc9k+D85CuoH+5exvigebljVtPk/JnzzXmX5w74he6tB8CD7PzjvovItSti+
xz0gDGqG/D/0RPePEBHtvtfPdpnn0/0/w0tVzN5nAL8d9K9Eej3/Pw+UYOh9
1BO/53NlWYhHAECP/lIiW5smv5WgDgED7QBAi4oERAFcOb9eFqk3iKABQPUG
qev1dk6/3HO0Tw9IAkBfHEHWHEJhv3Uasfag/QJA8qz9zgHxdL/lc0kO4q8D
QK1VxCyVAIm/CrVSByVWBEDUZOx+Giecv0o/TY9yCgVANhgzzZT5sL8/sbj4
wbIFQNIp94pYTsO/C9a/0sBXBkBKzlMo0ZrVv/JDuDvKCgdA3kmNg5Xk6b+O
mSGG1bEHQJ7JveBlRP2/RTh8X+tmCEChTyy94bYRwLG+RxoDEAlAKplgJmI5
JMD0965FyrUJQOOcsQkEuDbAUnoHAJxpCkD+nko1FlVLwGXk0JtvEQtACcUA
STMDX8CTl4vGTccLQLu+O4S313LAl/3hYdt5DEDn+wPAgIeGwFBLqd5qIA1A
pAde1bpnmcAk4mHqBNUNQJjkp/Zkrq7ArWCL16B9DkAdyt3yBnnBwA2SUDXs
Ig9A2ckHGO2U08CIDAciQtYPQFDzQjCtgOfAXDcX+Mw+EEASpsytrpr6wAKN
oyZ+mRBAx0wZLUogEMETvH0Nh/IQQA+jW59ePCPBTfQYGN1AEUAQ+cVelvU0
wZQYm+4=
                    "]]}}}, {
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> 
                    None}, PlotRange -> {{0., 5.}, {-1.3735903702083267`*^6, 
                    4.999919493407543}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "5.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False,
                  GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}]}, 
              Dynamic[Typeset`open$$], ImageSize -> Automatic], 
             BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
           StyleBox["]", "NonInterpretableSummary"]}]},
        "CopyTag",
        DisplayFunction->(#& ),
        InterpretationFunction->("InterpolatingFunction[{{0., 5.}}, <>]"& )],
       False,
       Editable->False,
       SelectWithContents->True,
       Selectable->False], "[", "t", "]"}]}], ",", 
    RowBox[{
     RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
     RowBox[{
      TagBox[
       TemplateBox[{RowBox[{
           StyleBox[
            TagBox["InterpolatingFunction", "SummaryHead"], 
            "NonInterpretableSummary"], 
           StyleBox["[", "NonInterpretableSummary"], 
           DynamicModuleBox[{Typeset`open$$ = False}, 
            PanelBox[
             PaneSelectorBox[{False -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwBUQOu/CFib1JlAgAAADQAAAACAAAAvPVFaG155z8oUpoXZ9KPPxgOmZZm
Uug/mp7RCnd2iT9SJBPeWSTrP93l51Xqens/YNlQq1TG7T9vZZpL8+VuP+Ws
fp2GLfA/yFyiCZaRYT9QfzcD+JPxP7LwzNv9ClM/JSHSK23i8j8qO9fpFoFF
PzBVT3L3TPQ/hTuf1WslNz/p7gOa4LD1P+xH0FBoMik/DFiahM389j9SbH2N
u5McP2VTE43PZPg/7MefSJvkDj8oHm5Y1bT5PypTOguMZQE/IXurQfAg+z90
2xt8xazyPsc9IAxqhvw/bi/x6DxG5D7Xz3aZ59P9P0+hi8m87tY+HfSvRHo9
/z+tAUYK0LjIPudzZVmIRwBA7P8gCZrDuz6VoA4BA+0AQBUT2CTbiK8+Xhap
N4igAUAIYgRoShChPtxztE8PSAJAW2ktkB46kz51GrH2oP0CQFO/GxyhnIQ+
5XNJDuKvA0Cv5U1swUF2Pgq1UgclVgRARRcL+KTVaD5KP02PcgoFQAd2DFFM
zFk+P7G4+MGyBUBKRzzFQKxKPgvWv9LAVwZA51CLtWQuOT7yQ7g7ygoHQNFV
s0jxCiE+jpkhhtWxB0A0HB3vosb7PUU4fF/rZghANV/ftETIsT2xvkcaAxAJ
QIcr/NkIRyg99PeuRcq1CUBsJbC9+5/FPVJ6BwCcaQpAjIc7ZQbC971l5NCb
bxELQBjNz2bPZR6+k5eLxk3HC0BCaeBER9jQPZf94WHbeQxAQonaXSxnxD1Q
S6neaiANQNAMU7DmVqk9JOJh6gTVDUBAGuVu9nXQva1gi9egfQ5AhVZ862XG
8L0NklA17CIPQFBu/wMO3iS9iAwHIkLWD0CLbUXvLSFpvFw3F/jMPhBAIJbz
UYX7Ir4CjaMmfpkQQHBlkJnsshK+E7x9DYfyEECWEiUMGEDZvP5eEOWQRRFA
ZQqzc+VkOj53phsEoJ8RQPConHn9Ifi9ymHfE7DzEUDIqqZ9QcsxO6vBG2vF
ThJACOVEgA6BJL33+qV6MqgSQGAjrQ9mnEK7HqjoeqD7EkBwhmS8moXRvNL5
o8ITVhNAsTrkYTDpPj5hvxf7h6oTQOVJeMXpn7I6MhRQ+v//E0AQNFlwCPdx
vAbef48=
                    "]]}}}, {
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> 
                    None}, PlotRange -> {{0., 5.}, {-2.209854202069799*^-9, 
                    0.015538030059624466`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "5.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False,
                  GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], True -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwBUQOu/CFib1JlAgAAADQAAAACAAAAvPVFaG155z8oUpoXZ9KPPxgOmZZm
Uug/mp7RCnd2iT9SJBPeWSTrP93l51Xqens/YNlQq1TG7T9vZZpL8+VuP+Ws
fp2GLfA/yFyiCZaRYT9QfzcD+JPxP7LwzNv9ClM/JSHSK23i8j8qO9fpFoFF
PzBVT3L3TPQ/hTuf1WslNz/p7gOa4LD1P+xH0FBoMik/DFiahM389j9SbH2N
u5McP2VTE43PZPg/7MefSJvkDj8oHm5Y1bT5PypTOguMZQE/IXurQfAg+z90
2xt8xazyPsc9IAxqhvw/bi/x6DxG5D7Xz3aZ59P9P0+hi8m87tY+HfSvRHo9
/z+tAUYK0LjIPudzZVmIRwBA7P8gCZrDuz6VoA4BA+0AQBUT2CTbiK8+Xhap
N4igAUAIYgRoShChPtxztE8PSAJAW2ktkB46kz51GrH2oP0CQFO/GxyhnIQ+
5XNJDuKvA0Cv5U1swUF2Pgq1UgclVgRARRcL+KTVaD5KP02PcgoFQAd2DFFM
zFk+P7G4+MGyBUBKRzzFQKxKPgvWv9LAVwZA51CLtWQuOT7yQ7g7ygoHQNFV
s0jxCiE+jpkhhtWxB0A0HB3vosb7PUU4fF/rZghANV/ftETIsT2xvkcaAxAJ
QIcr/NkIRyg99PeuRcq1CUBsJbC9+5/FPVJ6BwCcaQpAjIc7ZQbC971l5NCb
bxELQBjNz2bPZR6+k5eLxk3HC0BCaeBER9jQPZf94WHbeQxAQonaXSxnxD1Q
S6neaiANQNAMU7DmVqk9JOJh6gTVDUBAGuVu9nXQva1gi9egfQ5AhVZ862XG
8L0NklA17CIPQFBu/wMO3iS9iAwHIkLWD0CLbUXvLSFpvFw3F/jMPhBAIJbz
UYX7Ir4CjaMmfpkQQHBlkJnsshK+E7x9DYfyEECWEiUMGEDZvP5eEOWQRRFA
ZQqzc+VkOj53phsEoJ8RQPConHn9Ifi9ymHfE7DzEUDIqqZ9QcsxO6vBG2vF
ThJACOVEgA6BJL33+qV6MqgSQGAjrQ9mnEK7HqjoeqD7EkBwhmS8moXRvNL5
o8ITVhNAsTrkYTDpPj5hvxf7h6oTQOVJeMXpn7I6MhRQ+v//E0AQNFlwCPdx
vAbef48=
                    "]]}}}, {
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> 
                    None}, PlotRange -> {{0., 5.}, {-2.209854202069799*^-9, 
                    0.015538030059624466`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "5.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False,
                  GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}]}, 
              Dynamic[Typeset`open$$], ImageSize -> Automatic], 
             BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
           StyleBox["]", "NonInterpretableSummary"]}]},
        "CopyTag",
        DisplayFunction->(#& ),
        InterpretationFunction->("InterpolatingFunction[{{0., 5.}}, <>]"& )],
       False,
       Editable->False,
       SelectWithContents->True,
       Selectable->False], "[", "t", "]"}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.640458089555874*^9, 3.6404581368440313`*^9, 3.6404581897523623`*^9, {
   3.640458225597423*^9, 3.640458304691462*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Directive[
        Opacity[1.], 
        AbsoluteThickness[1.6], 
        RGBColor[1, 0, 0]], 
       LineBox[CompressedData["
1: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

        "]]}, {
       Directive[
        Opacity[1.], 
        AbsoluteThickness[1.6], 
        RGBColor[0, 0, 1]], 
       LineBox[CompressedData["
1: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
        "]]}}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None}, 
     PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Rabbit Population\"", "\"Hunter Population\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[1, 0, 0]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[0, 0, 1]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.640458089555874*^9, 3.6404581368440313`*^9, 3.6404581897523623`*^9, {
   3.640458225597423*^9, 3.640458304801856*^9}}]
}, Open  ]],

Cell["\<\
c. Will Bugs Bunny and his friends all be killed by the hunters? 
\tYes. According to the graph above, they will be killed very quickly by the \
hunters. 
\t\
\>", "Text",
 CellChangeTimes->{{3.6404584411780148`*^9, 3.64045847621609*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"soln", " ", "=", " ", 
  RowBox[{"NDSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"x", "'"}], "[", "t", "]"}], "\[Equal]", 
       RowBox[{
        RowBox[{"10", 
         RowBox[{"x", "[", "t", "]"}]}], "-", 
        RowBox[{"3", 
         RowBox[{"x", "[", "t", "]"}], "*", 
         RowBox[{"y", "[", "t", "]"}]}]}]}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"y", "'"}], "[", "t", "]"}], "\[Equal]", 
       RowBox[{
        RowBox[{"10", 
         RowBox[{"x", "[", "t", "]"}], " ", 
         RowBox[{"y", "[", "t", "]"}]}], "-", 
        RowBox[{"7", 
         RowBox[{"y", "[", "t", "]"}]}]}]}], ",", 
      RowBox[{
       RowBox[{"x", "[", "0", "]"}], "\[Equal]", "5"}], ",", 
      RowBox[{
       RowBox[{"y", "[", "0", "]"}], "\[Equal]", "2"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", "t", "]"}], ",", 
      RowBox[{"y", "[", "t", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "10"}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"x", "[", "t", "]"}], "/.", "soln"}], ",", 
     RowBox[{
      RowBox[{"y", "[", "t", "]"}], "/.", "soln"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Red", ",", "Blue"}], "}"}]}], ",", " ", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Rabbit Population\>\"", ",", "\"\<Hunter Population\>\""}], 
     "}"}]}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.640458015499712*^9, 3.6404580825238667`*^9}, {
  3.640458135194089*^9, 3.6404581359277782`*^9}, {3.640458188396388*^9, 
  3.640458304228682*^9}, {3.640458497585698*^9, 3.640458508476317*^9}, {
  3.640459079567971*^9, 3.6404591133936663`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "[", "t", "]"}], "\[Rule]", 
     RowBox[{
      TagBox[
       TemplateBox[{RowBox[{
           StyleBox[
            TagBox["InterpolatingFunction", "SummaryHead"], 
            "NonInterpretableSummary"], 
           StyleBox["[", "NonInterpretableSummary"], 
           DynamicModuleBox[{Typeset`open$$ = False}, 
            PanelBox[
             PaneSelectorBox[{False -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    
                    LineBox[{{0.0756662776939242, 2.6936680062917464`}, {
                    0.16301768919855672`, 0.03115957371372495}, {
                    0.3397473608878023, 0.0034364069790139137`}, {
                    0.5047654566075241, 0.005827006564212977}, {
                    0.666546552341635, 0.020636237782401888`}, {
                    0.84203980005796, 0.10548824377349422`}, {
                    1.0058214718047613`, 0.520186859213054}, {
                    1.166002659786448, 2.6936680062917464`}}], 
                    
                    LineBox[{{1.198606236269173, 2.6936680062917464`}, {
                    1.3575721192771815`, 0.2514901979915207}, {
                    1.5201173670510624`, 0.004832995647360444}, {
                    1.6963747668071574`, 0.00419294172671645}, {
                    1.8609205905937287`, 0.012674440513145147`}, {
                    2.022229414394689, 0.053535736894820406`}, {
                    2.1972503901778637`, 0.2889607521274617}, {
                    2.3605597899915147`, 1.4331115436115047`}, {
                    2.4369435317049017`, 2.6936680062917464`}}], 
                    LineBox[{{2.604027504832387, 2.6936680062917464`}, {
                    2.7113658935976344`, 0.010748045133732885`}, {
                    2.873438869438365, 0.003405450409575738}, {
                    3.04922399726131, 0.007748226690040566}, {
                    3.2132975491147313`, 0.03059465915153001}, {
                    3.391083252950367, 0.16485295037004072`}, {
                    3.565631956800391, 0.9099849080626065}, {
                    3.652596273958413, 2.6936680062917464`}}], 
                    
                    LineBox[{{3.7938131343439907`, 2.6936680062917464`}, {
                    3.9050183645436065`, 0.04527796581417623}, {
                    4.069856068436798, 0.003646837692353865}, {
                    4.2314567723443774`, 0.004938084649070405}, {
                    4.406769628234171, 0.01824867956581887}, {
                    4.570370908154441, 0.08225910833012888}, {
                    4.747684340056925, 0.46053878023363104`}, {
                    4.921760771973799, 2.5216037371593005`}, {
                    5.084125627921148, 0.9239906421343731}, {
                    5.260202635850712, 0.0055474055765664}, {
                    5.424568067810752, 0.003780499747254896}, {
                    5.585696499785182, 0.009995691293650206}, {
                    5.760537083741825, 0.046095501540293154`}, {
                    5.923666091728945, 0.2201541062738231}, {
                    6.1005072516982795`, 1.2457283082350568`}, {
                    6.162254983026354, 2.6936680062917464`}}], 
                    
                    LineBox[{{6.342703528233954, 2.6936680062917464`}, {
                    6.42752941971229, 0.025362871367427545`}, {
                    6.6031341557087035`, 0.003410953677502721}, {
                    6.767027315735594, 0.006023163843395294}, {
                    6.944632627744698, 0.02486455424012472}, {
                    7.119000939768191, 0.1277231603279639}, {7.28165767582216,
                     0.6251114103366151}, {7.411126167381898, 
                    2.6936680062917464`}}], 
                    
                    LineBox[{{7.495810339243184, 2.6936680062917464`}, {
                    7.622683875925003, 0.17746585554096836`}, {
                    7.784104188006052, 0.0045648390337636405`}, {
                    7.959236652069315, 0.0043056119678858955`}, {
                    8.122657540163054, 0.01316835032967225}, {
                    8.299790580239009, 0.06493704056690988}, {
                    8.473686620329351, 0.34909947739786396`}, {
                    8.63587108445017, 1.7114340749943937`}, {
                    8.787586052917707, 2.6936680062917464`}}], 
                    LineBox[{{8.82081593007904, 2.6936680062917464`}, {
                    8.975952740686711, 0.009413813923941776}, {
                    9.153849932802435, 0.0035252392641371886`}, {
                    9.328510124932547, 0.00914621078844529}, {
                    9.491458741093137, 0.03711237839889261}, {
                    9.66811950923594, 0.20008874878580854`}, {
                    9.83306870140922, 1.0070291018695958`}, {
                    9.909090453476143, 2.6936680062917464`}}]}}}, {
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> 
                    None}, PlotRange -> {{0., 10.}, {0., 
                    2.6936680062917464`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "10.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False,
                  GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], True -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    
                    LineBox[{{0.0756662776939242, 2.6936680062917464`}, {
                    0.16301768919855672`, 0.03115957371372495}, {
                    0.3397473608878023, 0.0034364069790139137`}, {
                    0.5047654566075241, 0.005827006564212977}, {
                    0.666546552341635, 0.020636237782401888`}, {
                    0.84203980005796, 0.10548824377349422`}, {
                    1.0058214718047613`, 0.520186859213054}, {
                    1.166002659786448, 2.6936680062917464`}}], 
                    
                    LineBox[{{1.198606236269173, 2.6936680062917464`}, {
                    1.3575721192771815`, 0.2514901979915207}, {
                    1.5201173670510624`, 0.004832995647360444}, {
                    1.6963747668071574`, 0.00419294172671645}, {
                    1.8609205905937287`, 0.012674440513145147`}, {
                    2.022229414394689, 0.053535736894820406`}, {
                    2.1972503901778637`, 0.2889607521274617}, {
                    2.3605597899915147`, 1.4331115436115047`}, {
                    2.4369435317049017`, 2.6936680062917464`}}], 
                    
                    LineBox[{{2.604027504832387, 2.6936680062917464`}, {
                    2.7113658935976344`, 0.010748045133732885`}, {
                    2.873438869438365, 0.003405450409575738}, {
                    3.04922399726131, 0.007748226690040566}, {
                    3.2132975491147313`, 0.03059465915153001}, {
                    3.391083252950367, 0.16485295037004072`}, {
                    3.565631956800391, 0.9099849080626065}, {
                    3.652596273958413, 2.6936680062917464`}}], 
                    
                    LineBox[{{3.7938131343439907`, 2.6936680062917464`}, {
                    3.9050183645436065`, 0.04527796581417623}, {
                    4.069856068436798, 0.003646837692353865}, {
                    4.2314567723443774`, 0.004938084649070405}, {
                    4.406769628234171, 0.01824867956581887}, {
                    4.570370908154441, 0.08225910833012888}, {
                    4.747684340056925, 0.46053878023363104`}, {
                    4.921760771973799, 2.5216037371593005`}, {
                    5.084125627921148, 0.9239906421343731}, {
                    5.260202635850712, 0.0055474055765664}, {
                    5.424568067810752, 0.003780499747254896}, {
                    5.585696499785182, 0.009995691293650206}, {
                    5.760537083741825, 0.046095501540293154`}, {
                    5.923666091728945, 0.2201541062738231}, {
                    6.1005072516982795`, 1.2457283082350568`}, {
                    6.162254983026354, 2.6936680062917464`}}], 
                    
                    LineBox[{{6.342703528233954, 2.6936680062917464`}, {
                    6.42752941971229, 0.025362871367427545`}, {
                    6.6031341557087035`, 0.003410953677502721}, {
                    6.767027315735594, 0.006023163843395294}, {
                    6.944632627744698, 0.02486455424012472}, {
                    7.119000939768191, 0.1277231603279639}, {7.28165767582216,
                     0.6251114103366151}, {7.411126167381898, 
                    2.6936680062917464`}}], 
                    
                    LineBox[{{7.495810339243184, 2.6936680062917464`}, {
                    7.622683875925003, 0.17746585554096836`}, {
                    7.784104188006052, 0.0045648390337636405`}, {
                    7.959236652069315, 0.0043056119678858955`}, {
                    8.122657540163054, 0.01316835032967225}, {
                    8.299790580239009, 0.06493704056690988}, {
                    8.473686620329351, 0.34909947739786396`}, {
                    8.63587108445017, 1.7114340749943937`}, {
                    8.787586052917707, 2.6936680062917464`}}], 
                    
                    LineBox[{{8.82081593007904, 2.6936680062917464`}, {
                    8.975952740686711, 0.009413813923941776}, {
                    9.153849932802435, 0.0035252392641371886`}, {
                    9.328510124932547, 0.00914621078844529}, {
                    9.491458741093137, 0.03711237839889261}, {
                    9.66811950923594, 0.20008874878580854`}, {
                    9.83306870140922, 1.0070291018695958`}, {
                    9.909090453476143, 2.6936680062917464`}}]}}}, {
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> 
                    None}, PlotRange -> {{0., 10.}, {0., 
                    2.6936680062917464`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "10.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False,
                  GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}]}, 
              Dynamic[Typeset`open$$], ImageSize -> Automatic], 
             BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
           StyleBox["]", "NonInterpretableSummary"]}]},
        "CopyTag",
        DisplayFunction->(#& ),
        InterpretationFunction->("InterpolatingFunction[{{0., 10.}}, <>]"& )],
       
       False,
       Editable->False,
       SelectWithContents->True,
       Selectable->False], "[", "t", "]"}]}], ",", 
    RowBox[{
     RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
     RowBox[{
      TagBox[
       TemplateBox[{RowBox[{
           StyleBox[
            TagBox["InterpolatingFunction", "SummaryHead"], 
            "NonInterpretableSummary"], 
           StyleBox["[", "NonInterpretableSummary"], 
           DynamicModuleBox[{Typeset`open$$ = False}, 
            PanelBox[
             PaneSelectorBox[{False -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAAStFeOa+/hj5Lx2ykBwAAQFt+433D
3cQ/ba1H/tPfKUA/lvq2a77VPyaNro8TgQ5AUPQI4wkn4D9L3rFrR1nzPzg0
cm9ZVOU/NlTtcO5m2T/3vGVz/fHqPzMGf401R8A/r0FwQdgX8D85uXLhyqKv
P07J8gTc7vI/xoROuHd0yz9JHOSKnbj1P/REo4ZPNzJAGA6ZlmZS+D/0dXKP
4wIZQFIkE95ZJPs/usyrWPNS/T9g2VCrVMb9P2zhLpe2wuI/5ax+nYYtAEBn
OJv+cGHJP1B/NwP4kwFAbB0z3bMDsz8lIdIrbeICQEZI4mTJeLM/MFVPcvdM
BEBRHAvUC38hQOnuA5rgsAVA3YRNPdz5IkAMWJqEzfwGQOkjSB1zmwhAZVMT
jc9kCEAqZyhxPQDtPygebljVtAlAFkHJ8dTj0j8he6tB8CALQFSFL1jWDbk/
xz0gDGqGDECr0fJ8IZWvP9fPdpnn0w1AOJ+StQ4U5z8d9K9Eej0PQDU7Xb/v
ECxA53NlWYhHEEC0f5TMVQwSQJWgDgED7RBAXeEJFXtv9z9eFqk3iKARQPFi
pBCq89s/3HO0Tw9IEkB203QyjA3DP3Uasfag/RJAL+kVaYY8sD/lc0kO4q8T
QCEEq32J8MM/CrVSByVWFEB9ae2v4C4zQEo/TY9yChVAUgfjjlCaG0A/sbj4
wbIVQIUkNW6clAFAC9a/0sBXFkAxYEHGpPzmP/JDuDvKChdAAMmYHlYozD+O
mSGG1bEXQBlhdXJJibU/RTh8X+tmGEDUAbGq+8WxP7G+RxoDEBlAjsujkgU1
B0D0965FyrUZQDUe0SoRnyhAUnoHAJxpGkBxBAgBuTMNQGXk0JtvERtA8J+M
jcCr8j+Tl4vGTccbQOW4QDAxCtY/l/3hYdt5HEA6yHi6Gf+8P1BLqd5qIB1A
d3LRv+Hhrj8k4mHqBNUdQDgCRpDcPNU/rWCL16B9HkAjXQOk7IQxQA2SUDXs
Ih9AYIjif1LYF0CIDAciQtYfQLrTfAbrLPw/XDcX+Mw+IEDeLUWXuiziPwKN
oyZ+mSBAyxrnRoxDxj8TvH0Nh/IgQGSrkn+QqbE//l4Q5ZBFIUAExDDlG862
P3emGwSgnyFAeZVya+DjLEDKYd8TsPMhQFtb43u/BSJAq8Eba8VOIkB/FdY0
2esEQPf6pXoyqCJAKhwgjdLg6D8eqOh6oPsiQEndo/oea9A/0vmjwhNWI0A9
7h7/4Zi2P2G/F/uHqiNADD9rsrU3sD8yFFD6//8jQLAy2vWi6vM/W9WzfQ==

                    "]]}}}, {
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> 
                    None}, PlotRange -> {{0., 10.}, {0., 19.18311595483964}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "10.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False,
                  GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], True -> GridBox[{{
                   PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                   GraphicsBox[{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAAStFeOa+/hj5Lx2ykBwAAQFt+433D
3cQ/ba1H/tPfKUA/lvq2a77VPyaNro8TgQ5AUPQI4wkn4D9L3rFrR1nzPzg0
cm9ZVOU/NlTtcO5m2T/3vGVz/fHqPzMGf401R8A/r0FwQdgX8D85uXLhyqKv
P07J8gTc7vI/xoROuHd0yz9JHOSKnbj1P/REo4ZPNzJAGA6ZlmZS+D/0dXKP
4wIZQFIkE95ZJPs/usyrWPNS/T9g2VCrVMb9P2zhLpe2wuI/5ax+nYYtAEBn
OJv+cGHJP1B/NwP4kwFAbB0z3bMDsz8lIdIrbeICQEZI4mTJeLM/MFVPcvdM
BEBRHAvUC38hQOnuA5rgsAVA3YRNPdz5IkAMWJqEzfwGQOkjSB1zmwhAZVMT
jc9kCEAqZyhxPQDtPygebljVtAlAFkHJ8dTj0j8he6tB8CALQFSFL1jWDbk/
xz0gDGqGDECr0fJ8IZWvP9fPdpnn0w1AOJ+StQ4U5z8d9K9Eej0PQDU7Xb/v
ECxA53NlWYhHEEC0f5TMVQwSQJWgDgED7RBAXeEJFXtv9z9eFqk3iKARQPFi
pBCq89s/3HO0Tw9IEkB203QyjA3DP3Uasfag/RJAL+kVaYY8sD/lc0kO4q8T
QCEEq32J8MM/CrVSByVWFEB9ae2v4C4zQEo/TY9yChVAUgfjjlCaG0A/sbj4
wbIVQIUkNW6clAFAC9a/0sBXFkAxYEHGpPzmP/JDuDvKChdAAMmYHlYozD+O
mSGG1bEXQBlhdXJJibU/RTh8X+tmGEDUAbGq+8WxP7G+RxoDEBlAjsujkgU1
B0D0965FyrUZQDUe0SoRnyhAUnoHAJxpGkBxBAgBuTMNQGXk0JtvERtA8J+M
jcCr8j+Tl4vGTccbQOW4QDAxCtY/l/3hYdt5HEA6yHi6Gf+8P1BLqd5qIB1A
d3LRv+Hhrj8k4mHqBNUdQDgCRpDcPNU/rWCL16B9HkAjXQOk7IQxQA2SUDXs
Ih9AYIjif1LYF0CIDAciQtYfQLrTfAbrLPw/XDcX+Mw+IEDeLUWXuiziPwKN
oyZ+mSBAyxrnRoxDxj8TvH0Nh/IgQGSrkn+QqbE//l4Q5ZBFIUAExDDlG862
P3emGwSgnyFAeZVya+DjLEDKYd8TsPMhQFtb43u/BSJAq8Eba8VOIkB/FdY0
2esEQPf6pXoyqCJAKhwgjdLg6D8eqOh6oPsiQEndo/oea9A/0vmjwhNWI0A9
7h7/4Zi2P2G/F/uHqiNADD9rsrU3sD8yFFD6//8jQLAy2vWi6vM/W9WzfQ==

                    "]]}}}, {
                    DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> 
                    None}, PlotRange -> {{0., 10.}, {0., 19.18311595483964}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                   GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "10.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                 GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False,
                  GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}]}, 
              Dynamic[Typeset`open$$], ImageSize -> Automatic], 
             BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
           StyleBox["]", "NonInterpretableSummary"]}]},
        "CopyTag",
        DisplayFunction->(#& ),
        InterpretationFunction->("InterpolatingFunction[{{0., 10.}}, <>]"& )],
       
       False,
       Editable->False,
       SelectWithContents->True,
       Selectable->False], "[", "t", "]"}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.640458500124099*^9, 3.640458508843614*^9}, 
   3.640459121847715*^9}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}, {
       Directive[
        Opacity[1.], 
        AbsoluteThickness[1.6], 
        RGBColor[1, 0, 0]], 
       LineBox[CompressedData["
1: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
TeOsTy91FsHq36smZmcpepqd2p7bKYL/B6LQLCk=
        "]]}, {
       Directive[
        Opacity[1.], 
        AbsoluteThickness[1.6], 
        RGBColor[0, 0, 1]], 
       LineBox[CompressedData["
1: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
        "]]}}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None}, 
     PlotRange -> {All, All}, PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Rabbit Population\"", "\"Hunter Population\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 0, 1]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[1, 0, 0]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[0, 0, 1]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.640458500124099*^9, 3.640458508843614*^9}, 
   3.640459122022328*^9}]
}, Open  ]],

Cell[TextData[StyleBox["I chose to change the death rate of the rabbits based \
on the encounter rate of the rabbits and hunters from 100 to 3.  The rabbits \
were dying out too quickly and in turn the hunters were also dying because \
their population relies on hunting the rabbits.  Above in the graph, you can \
see the cyclic rate of the rabbits\[CloseCurlyQuote] and hunters\
\[CloseCurlyQuote] populations without any kind of damping - the amplitude of \
both populations remain constant at their peaks.  I decreased the death rate \
of rabbits based on the encounter rate because the rabbits are able to run \
away and in the model given, it was definite that they would not be able to \
do so. \n\n",
 FontSlant->"Plain"]], "Text",
 CellChangeTimes->{{3.64045856984713*^9, 3.6404586935334883`*^9}, {
   3.6404587443712797`*^9, 3.640458870072688*^9}, {3.640458910011812*^9, 
   3.6404590062923107`*^9}, 3.64045905589554*^9},
 FontSlant->"Italic"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{974, 651},
WindowMargins->{{-3, Automatic}, {Automatic, 0}},
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (December 4, \
2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 134, 4, 148, "Title"],
Cell[CellGroupData[{
Cell[739, 30, 87, 1, 64, "Section"],
Cell[829, 33, 9820, 388, 692, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10686, 426, 87, 1, 64, "Section"],
Cell[10776, 429, 504, 16, 123, "Text"],
Cell[CellGroupData[{
Cell[11305, 449, 401, 11, 48, "Input"],
Cell[11709, 462, 605, 20, 44, "Output"]
}, Open  ]],
Cell[12329, 485, 1196, 21, 127, "Text"],
Cell[13528, 508, 164, 3, 30, "Text"],
Cell[CellGroupData[{
Cell[13717, 515, 375, 6, 28, "Input"],
Cell[14095, 523, 295, 4, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14427, 532, 337, 9, 41, "Input"],
Cell[14767, 543, 323, 8, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15127, 556, 265, 7, 41, "Input"],
Cell[15395, 565, 280, 7, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15712, 577, 424, 10, 28, "Input"],
Cell[16139, 589, 11604, 201, 240, "Output"]
}, Open  ]],
Cell[27758, 793, 1385, 50, 258, "Text"],
Cell[29146, 845, 16, 0, 30, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29199, 850, 89, 1, 64, "Section"],
Cell[29291, 853, 1077, 33, 181, "Text"],
Cell[30371, 888, 2693, 100, 409, "Text"],
Cell[CellGroupData[{
Cell[33089, 992, 292, 8, 35, "Input"],
Cell[33384, 1002, 190, 6, 28, "Output"]
}, Open  ]],
Cell[33589, 1011, 2086, 81, 206, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35712, 1097, 91, 1, 64, "Section"],
Cell[35806, 1100, 2775, 70, 522, "Text"],
Cell[CellGroupData[{
Cell[38606, 1174, 1880, 55, 80, "Input"],
Cell[40489, 1231, 22392, 438, 123, "Output"],
Cell[62884, 1671, 46942, 821, 244, "Output"]
}, Open  ]],
Cell[109841, 2495, 248, 6, 68, "Text"],
Cell[CellGroupData[{
Cell[110114, 2505, 1977, 56, 80, "Input"],
Cell[112094, 2563, 28947, 543, 123, "Output"],
Cell[141044, 3108, 99025, 1674, 243, "Output"]
}, Open  ]],
Cell[240084, 4785, 953, 14, 144, "Text"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
